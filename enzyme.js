/*

======================================================================================================================================================

Shallow rendering is useful to constrain yourself to testing a component as a unit, and to ensure that your tests aren't indirectly asserting on behavior of child components.

As of Enzyme v3, the shallow API does call React lifecycle methods such as componentDidMount and componentDidUpdate.

describe('<MyComponent />', () => {
  it('renders three <Foo /> components', () => {
    const wrapper = shallow(<MyComponent />);
    expect(wrapper.find(Foo)).to.have.lengthOf(3);
  });
}

======================================================================================================================================================
.find(selector) => ShallowWrapper
Finds every node in the render tree of the current wrapper that matches the provided selector.

CSS Selectors:

expect(wrapper.find('.bar')).to.have.lengthOf(3);

Component Constructors:

expect(wrapper.find(Foo)).to.have.lengthOf(1);


Object Property Selector:

const wrapper = shallow(<MyComponent />);
expect(wrapper.find({ prop: 'value' })).to.have.lengthOf(1);

======================================================================================================================================================


======================================================================================================================================================


======================================================================================================================================================


======================================================================================================================================================



======================================================================================================================================================


======================================================================================================================================================


======================================================================================================================================================


======================================================================================================================================================


======================================================================================================================================================



======================================================================================================================================================


======================================================================================================================================================


======================================================================================================================================================


======================================================================================================================================================


======================================================================================================================================================



======================================================================================================================================================


======================================================================================================================================================


======================================================================================================================================================


======================================================================================================================================================

*/
